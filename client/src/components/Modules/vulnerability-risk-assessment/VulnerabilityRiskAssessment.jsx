import { useState } from 'react';
import './VulnerabilityRiskAssessment.css';

// Remove later
const mockVulnerabilities = [
  { id: 1, description: 'SQL Injection in login form', severity: 'High', asset_id: 2, risk_score: 7.5 },
  { id: 2, description: 'Open port 22 on public IP', severity: 'Medium', asset_id: 1, risk_score: 5.0 },
  { id: 3, description: 'Cross-Site Scripting in comments section', severity: 'Low', asset_id: 3, risk_score: 2.5 },
  { id: 4, description: 'Weak password policy', severity: 'Critical', asset_id: 4, risk_score: 8.5 },
  { id: 5, description: 'Insecure file upload vulnerability', severity: 'High', asset_id: 5, risk_score: 6.0 },
  { id: 6, description: 'Unencrypted sensitive data in transit', severity: 'Medium', asset_id: 6, risk_score: 4.5 },
  { id: 7, description: 'Privilege escalation vulnerability', severity: 'Critical', asset_id: 7, risk_score: 9.0 },
  { id: 8, description: 'Improper error handling', severity: 'Low', asset_id: 8, risk_score: 3.0 },
  { id: 9, description: 'Broken authentication mechanism', severity: 'High', asset_id: 9, risk_score: 7.0 },
  { id: 10, description: 'Exposure of sensitive information through logs', severity: 'Medium', asset_id: 10, risk_score: 5.5 },
];


const VulnerabilityRiskAssessment = () => {
  const [vulnerabilities, setVulnerabilities] = useState(mockVulnerabilities);
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);
  const [showVulnerabilityPopup, setShowVulnerabilityPopup] = useState(false);
  const [showAddVulnerabilityPopup, setShowAddVulnerabilityPopup] = useState(false);
  const [newVulnerability, setNewVulnerability] = useState({
    description: '',
    severity: '',
    asset_id: '',
    risk_score: ''
  });

  const handleVulnerabilityClick = (vulnerability) => {
    setSelectedVulnerability(vulnerability);
    setShowVulnerabilityPopup(true);
  };

  const handleAddVulnerabilityClick = () => {
    setShowAddVulnerabilityPopup(true);
  };

  const handleAddVulnerabilitySubmit = (e) => {
    e.preventDefault();
    setVulnerabilities([...vulnerabilities, { ...newVulnerability, id: vulnerabilities.length + 1 }]);
    setShowAddVulnerabilityPopup(false);
    setNewVulnerability({ description: '', severity: '', asset_id: '', risk_score: '' });
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewVulnerability({ ...newVulnerability, [name]: value });
  };

  return (
    <div className="vulnerability-assessment">
      <div className="vulnerability-header">
        <button className="add-vulnerability-button" onClick={handleAddVulnerabilityClick}>Add Vulnerability</button>
      </div>

      <table className="vulnerability-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Description</th>
            <th>Severity</th>
            <th>Asset ID</th>
            <th>Risk Score</th>
          </tr>
        </thead>
        <tbody>
          {vulnerabilities.map((vulnerability) => (
            <tr
              key={vulnerability.id}
              className="vulnerability-row"
              onClick={() => handleVulnerabilityClick(vulnerability)}
            >
              <td>{vulnerability.id}</td>
              <td>{vulnerability.description}</td>
              <td>{vulnerability.severity}</td>
              <td>{vulnerability.asset_id}</td>
              <td>{vulnerability.risk_score}</td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Vulnerability Details Popup */}
      {showVulnerabilityPopup && selectedVulnerability && (
        <div className="popup-overlay">
          <div className="popup">
            <h3>Vulnerability Details</h3>
            <div className="vulnerability-details">
              <p><strong>ID:</strong> {selectedVulnerability.id}</p>
              <p><strong>Description:</strong> {selectedVulnerability.description}</p>
              <p><strong>Severity:</strong> {selectedVulnerability.severity}</p>
              <p><strong>Asset ID:</strong> {selectedVulnerability.asset_id}</p>
              <p><strong>Risk Score:</strong> {selectedVulnerability.risk_score}</p>
            </div>
            <button onClick={() => setShowVulnerabilityPopup(false)}>Close</button>
          </div>
        </div>
      )}

      {/* Add Vulnerability Popup */}
      {showAddVulnerabilityPopup && (
        <div className="popup-overlay">
          <div className="popup">
            <h3>Add New Vulnerability</h3>
            <form onSubmit={handleAddVulnerabilitySubmit}>
              <input
                type="text"
                name="description"
                placeholder="Enter Description"
                value={newVulnerability.description}
                onChange={handleInputChange}
                required
              />
              <input
                type="text"
                name="severity"
                placeholder="Enter Severity (e.g., Low, Medium, High)"
                value={newVulnerability.severity}
                onChange={handleInputChange}
                required
              />
              <input
                type="number"
                name="asset_id"
                placeholder="Enter Asset ID"
                value={newVulnerability.asset_id}
                onChange={handleInputChange}
                required
              />
              <input
                type="number"
                step="0.1"
                name="risk_score"
                placeholder="Enter Risk Score"
                value={newVulnerability.risk_score}
                onChange={handleInputChange}
                required
              />
              <button type="submit">Add</button>
              <button type="button" onClick={() => setShowAddVulnerabilityPopup(false)}>Cancel</button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityRiskAssessment;