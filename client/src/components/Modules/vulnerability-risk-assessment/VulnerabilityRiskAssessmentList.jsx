import { useState, useEffect } from 'react';
// import axios from 'axios';
// import { API_PATHS } from '../apiConfig';
import VulnerabilityRiskAssessmentDetails from './VulnerabilityRiskAssessmentDetails';
import AddVulnerability from './AddVulnerability';

import './VulnerabilityRiskAssessmentList.css';

const mockVulnerabilities = [
  { id: 1, description: 'SQL Injection in login form', severity: 'High', asset_id: 2, risk_score: 7.5 },
  { id: 2, description: 'Open port 22 on public IP', severity: 'Medium', asset_id: 1, risk_score: 5.0 },
  { id: 3, description: 'Cross-Site Scripting in comments section', severity: 'Low', asset_id: 3, risk_score: 2.5 },
  { id: 4, description: 'Weak password policy', severity: 'Critical', asset_id: 4, risk_score: 8.5 },
  { id: 5, description: 'Insecure file upload vulnerability', severity: 'High', asset_id: 5, risk_score: 6.0 },
  { id: 6, description: 'Unencrypted sensitive data in transit', severity: 'Medium', asset_id: 6, risk_score: 4.5 },
  { id: 7, description: 'Privilege escalation vulnerability', severity: 'Critical', asset_id: 7, risk_score: 9.0 },
  { id: 8, description: 'Improper error handling', severity: 'Low', asset_id: 8, risk_score: 3.0 },
  { id: 9, description: 'Broken authentication mechanism', severity: 'High', asset_id: 9, risk_score: 7.0 },
  { id: 10, description: 'Exposure of sensitive information through logs', severity: 'Medium', asset_id: 10, risk_score: 5.5 },
];


const VulnerabilityRiskAssessmentList = () => {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [selectedVulnerabilityId, setSelectedVulnerabilityId] = useState(null);
  const [showVulnerabilityPopup, setShowVulnerabilityPopup] = useState(false);
  const [showAddVulnerabilityPopup, setShowAddVulnerabilityPopup] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fetch vulnerabilities when component mounts
  useEffect(() => {
    fetchVulnerabilitiesList();
  }, []);

  // Fetch vulnerabilities data from API
  const fetchVulnerabilitiesList = async () => {
    try {
      setLoading(true);
      // Replace the mock data with actual API call
      // const response = await axios.get(API_PATHS.VULNERABILITIES_LIST);
      const response = { data: mockVulnerabilities };
      setVulnerabilities(response.data);
      setLoading(false);
    } catch (err) {
      console.error('Error fetching vulnerabilities:', err);
      setError('Failed to fetch vulnerabilities.');
      setLoading(false);
    }
  };

  const handleVulnerabilityClick = (vulnerability) => {
    setSelectedVulnerabilityId(vulnerability.id);
    setShowVulnerabilityPopup(true);
  };

  const handleAddVulnerabilityClick = () => {
    setShowAddVulnerabilityPopup(true);
  };

  if (loading) return <div>Loading vulnerabilities...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div className="vulnerability-assessment">
      <div className="vulnerability-header">
        <button className="add-vulnerability-button" onClick={handleAddVulnerabilityClick}>
          Add Vulnerability
        </button>
      </div>

      <table className="vulnerability-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Description</th>
            <th>Severity</th>
            <th>Asset ID</th>
            <th>Risk Score</th>
          </tr>
        </thead>
        <tbody>
          {vulnerabilities.map((vulnerability) => (
            <tr
              key={vulnerability.id}
              className="vulnerability-row"
              onClick={() => handleVulnerabilityClick(vulnerability)}
            >
              <td>{vulnerability.id}</td>
              <td>{vulnerability.description}</td>
              <td>{vulnerability.severity}</td>
              <td>{vulnerability.asset_id}</td>
              <td>{vulnerability.risk_score}</td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Vulnerability Details Popup */}
      <VulnerabilityRiskAssessmentDetails
        showVulnerabilityPopup={showVulnerabilityPopup}
        selectedVulnerabilityId={selectedVulnerabilityId}
        setShowVulnerabilityPopup={setShowVulnerabilityPopup}
      />

      {/* Add Vulnerability Popup */}
      <AddVulnerability
        showAddVulnerabilityPopup={showAddVulnerabilityPopup}
        setShowAddVulnerabilityPopup={setShowAddVulnerabilityPopup}
        refreshVulnerabilityList={fetchVulnerabilitiesList}
      />
    </div>
  );
};

export default VulnerabilityRiskAssessmentList;